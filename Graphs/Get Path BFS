import java.util.Scanner;
import java.util.*;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int v = s.nextInt();
		int e = s.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
        int edges[][] = new int[v][v];
        for(int i=0;i<v;i++)
        {
            for(int j=0;j<v;j++)
            {
                edges[i][j] = 0; 
            }
        }
        for(int i=0;i<e;i++)
        {
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            edges[v1][v2]=1;
            edges[v2][v1]=1;
        }
        boolean visited[]= new boolean[v];
        for(int i=0;i<v;i++)
        {
            visited[i]=false;
        }
        HashMap<Integer,Integer> hash = new HashMap<>();
        int v1 = s.nextInt();
        int v2 = s.nextInt();
        ArrayList<Integer> a=getpath(edges,v,v1,v2,visited,hash);
         // ArrayList<Integer> a=new ArrayList<>();
        for(int i=0;i<a.size();i++)
        {
            System.out.print(a.get(i)+" ");
        }
        // ArrayList<Integer> a=new ArrayList<>();
        // return a;
	}
    static ArrayList<Integer> getpath( int edges[][],int v,int v1,int v2,boolean visited[],HashMap<Integer,Integer> hash)
    {
        Queue<Integer> q = new LinkedList<>();
        q.add(v1);
        visited[v1]=true;
        while(!q.isEmpty())
        {
            int count = q.size();
            while(count != 0)
            {
                int temp = q.remove();
                 // System.out.println(temp);
               
                for(int i=0;i<v;i++)
                {
                    if(visited[i] == false && edges[temp][i] == 1)
                    {
                        // System.out.println(i);
                         
                        hash.put(i,temp);
                        q.add(i);
                         visited[i] = true;
                        if(i==v2)
                     {
                      ArrayList<Integer> a  = new ArrayList<>();
                        int curr = v2;
                        a.add(v2);
                        while(curr != v1)
                        {
                           curr = hash.get(curr);
                            // System.out.println(curr);
                            a.add(curr);
                        }
                        
                    return a;
                    
                     }
                    }
                   
                }
                System.out.println();
            count--;
            }
            // break;
        }
        ArrayList<Integer> a = new ArrayList<>();
        return a;
            }
    }
   
