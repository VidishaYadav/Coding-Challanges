public class solution {
    public int solve(int n,String cake[]) {
        //write your code here
        boolean visited[][] = new boolean[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                visited[i][j] = false;
            }
        }
        int dir[][] = {{1,0},{-1,0},{0,1},{0,-1}};
        int ans = 0;
         for(int i=0;i<n;i++)
         {
            for(int j=0;j<n;j++)
            {
                if(visited[i][j] == false && cake[i].charAt(j)=='1')
                {
                    int count=maxpiece(cake,visited,dir,i,j,n);
                    if(count > ans)
                    ans = count;
                }
            }
         }
        return ans;
    }
    
    int maxpiece(String cake[],boolean visited[][],int dir[][],int i,int j,int n)
    {
        visited[i][j]=true;
        int ans=0;
        for(int k=0;k<4;k++)
        {
            int ni = i+dir[k][0];
            int nj = j+dir[k][1];
            if((isvalid(ni,nj,n)==true) && (visited[ni][nj] == false) && (cake[ni].charAt(nj)=='1'))
            {
                int c=maxpiece(cake,visited,dir,ni,nj,n);
                ans+=c;
            }
        }
        return ans+1;
        }
    
    boolean isvalid(int i,int j,int n)
    {
        if(i>=0 && i<n && j>=0 && j<n)
            return true;
        return false;
    }
}
